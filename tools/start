#!/bin/bash

# 🇧🇷 Brazil SSH Tunnel - Smart Setup Assistant
# Guides users from zero to working tunnel

set -e

PROJECT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
CONFIG_FILE="$PROJECT_DIR/config.env"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Helper functions
print_header() {
    echo -e "\n${PURPLE}🇧🇷 Brazil SSH Tunnel Setup Assistant${NC}"
    echo -e "${PURPLE}=====================================\n${NC}"
}

print_step() {
    echo -e "${BLUE}$1${NC}"
}

print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

ask_yes_no() {
    while true; do
        read -p "$(echo -e "${YELLOW}$1 (y/n): ${NC}")" yn
        case $yn in
            [Yy]* ) return 0;;
            [Nn]* ) return 1;;
            * ) echo "Please answer yes or no.";;
        esac
    done
}

# Show interactive menu
show_menu() {
    echo -e "\n${PURPLE}🇧🇷 Brazil SSH Tunnel Control Panel${NC}"
    echo -e "${PURPLE}====================================${NC}"
    
    # Show current tunnel status
    if check_tunnel_status; then
        echo -e "${GREEN}Status: ✅ Tunnel is running${NC}"
        echo -e "${BLUE}SOCKS proxy: localhost:${LOCAL_PORT}${NC}"
    else
        echo -e "${YELLOW}Status: ❌ Tunnel is stopped${NC}"
    fi
    
    echo -e "\n${BLUE}What would you like to do?${NC}"
    echo -e "${YELLOW}1)${NC} 🚀 Start tunnel"
    echo -e "${YELLOW}2)${NC} 🛑 Stop tunnel" 
    echo -e "${YELLOW}3)${NC} 🔄 Restart tunnel"
    echo -e "${YELLOW}4)${NC} 🧪 Test tunnel connection"
    echo -e "${YELLOW}5)${NC} 📖 Open Firefox setup guide"
    echo -e "${YELLOW}6)${NC} 📱 Open Android setup guide"
    echo -e "${YELLOW}7)${NC} 🔍 Debug tunnel issues"
    echo -e "${YELLOW}8)${NC} ⚙️  Edit configuration"
    echo -e "${YELLOW}9)${NC} 🔧 Open tools directory"
    echo -e "${YELLOW}0)${NC} 🚪 Exit"
    echo ""
}

# Get user menu choice
get_menu_choice() {
    while true; do
        read -p "$(echo -e "${YELLOW}Enter choice [0-9]: ${NC}")" choice
        case $choice in
            [0-9]) echo "$choice"; return 0;;
            *) echo -e "${RED}Please enter a number between 0-9${NC}";;
        esac
    done
}

# Handle menu choice
handle_menu_choice() {
    case $1 in
        1) # Start tunnel
            if check_tunnel_status; then
                print_warning "Tunnel is already running!"
            else
                start_tunnel
            fi
            ;;
        2) # Stop tunnel
            stop_tunnel
            ;;
        3) # Restart tunnel
            restart_tunnel
            ;;
        4) # Test tunnel
            if check_tunnel_status; then
                "$PROJECT_DIR/scripts/test_proxy.sh"
            else
                print_warning "Tunnel is not running. Start it first."
            fi
            ;;
        5) # Firefox setup
            print_step "Opening Firefox setup guide..."
            open "$PROJECT_DIR/docs/foxyproxy_setup.md"
            ;;
        6) # Android setup
            print_step "Opening Android setup guide..."
            open "$PROJECT_DIR/docs/android_setup.md"
            ;;
        7) # Debug
            "$PROJECT_DIR/scripts/debug_tunnel.sh"
            ;;
        8) # Edit config
            if command -v code >/dev/null 2>&1; then
                print_step "Opening config in VS Code..."
                code "$PROJECT_DIR/config.env"
            elif command -v nano >/dev/null 2>&1; then
                print_step "Opening config in nano..."
                nano "$PROJECT_DIR/config.env"
            else
                print_step "Opening config in default editor..."
                open "$PROJECT_DIR/config.env"
            fi
            ;;
        9) # Advanced tools
            print_step "Opening tools directory..."
            open "$PROJECT_DIR/tools"
            ;;
        0) # Exit
            print_success "Goodbye! 🇧🇷"
            return 1
            ;;
    esac
    return 0
}

# Interactive menu loop
interactive_menu() {
    while true; do
        show_menu
        choice=$(get_menu_choice)
        
        echo "" # Add spacing
        
        if ! handle_menu_choice $choice; then
            break
        fi
        
        # Pause before showing menu again
        echo -e "\n${BLUE}Press Enter to continue...${NC}"
        read
    done
}

# Check if config file exists and is valid
check_config() {
    if [[ ! -f "$CONFIG_FILE" ]]; then
        print_error "config.env not found!"
        return 1
    fi
    
    source "$CONFIG_FILE"
    
    # Check required variables
    if [[ -z "$VM_IP" || -z "$SSH_USER" || -z "$SSH_KEY" || -z "$LOCAL_PORT" ]]; then
        print_error "config.env is incomplete!"
        return 1
    fi
    
    return 0
}

# Check SSH key exists
check_ssh_key() {
    local ssh_key_path="${SSH_KEY/#\~/$HOME}"
    
    if [[ ! -f "$ssh_key_path" ]]; then
        print_error "SSH key not found: $ssh_key_path"
        return 1
    fi
    
    # Check permissions
    local perms=$(stat -f "%A" "$ssh_key_path" 2>/dev/null || echo "000")
    if [[ "$perms" != "600" ]]; then
        print_warning "SSH key has wrong permissions: $perms"
        echo -e "${BLUE}Fixing permissions...${NC}"
        chmod 600 "$ssh_key_path"
        print_success "SSH key permissions fixed"
    fi
    
    return 0
}

# Test SSH connection
test_ssh_connection() {
    local ssh_key_path="${SSH_KEY/#\~/$HOME}"
    
    print_step "Testing SSH connection to $VM_IP..."
    
    if ssh -i "$ssh_key_path" -o ConnectTimeout=10 -o BatchMode=yes "$SSH_USER@$VM_IP" "echo 'SSH connection successful'" &>/dev/null; then
        print_success "SSH connection works!"
        return 0
    else
        print_error "SSH connection failed!"
        return 1
    fi
}

# Check if tunnel is already running
check_tunnel_status() {
    if pgrep -f "ssh.*${LOCAL_PORT}.*${SSH_USER}@${VM_IP}" > /dev/null; then
        print_success "SSH tunnel is already running!"
        return 0
    else
        return 1
    fi
}

# Start the tunnel
start_tunnel() {
    print_step "Starting SSH tunnel..."
    
    # Check if port is in use
    if lsof -i ":$LOCAL_PORT" > /dev/null 2>&1; then
        print_warning "Port $LOCAL_PORT is already in use"
        if ask_yes_no "Kill existing process and restart?"; then
            pkill -f "ssh.*${LOCAL_PORT}" || true
            sleep 2
        else
            return 1
        fi
    fi
    
    # Start tunnel - try background first, then Terminal if needed
    local ssh_key_path="${SSH_KEY/#\~/$HOME}"
    
    print_step "Attempting to start tunnel in background..."
    
    # Try to start tunnel in background first
    if ssh -i "$ssh_key_path" -D "$LOCAL_PORT" $SSH_OPTIONS -f "$SSH_USER@$VM_IP"; then
        sleep 2
        if check_tunnel_status; then
            print_success "SSH tunnel started successfully in background!"
            return 0
        fi
    fi
    
    print_step "Background start failed, opening new Terminal window..."
    
    # If background fails, open in Terminal for user to see errors
    osascript << APPLESCRIPT
tell application "Terminal"
    activate
    do script "cd '$PROJECT_DIR' && echo 'Starting Brazil SSH Tunnel...' && ./scripts/ssh_tunnel.sh"
    set custom title of front tab of front window to "🇧🇷 Brazil SSH Tunnel"
end tell
APPLESCRIPT
    
    print_success "Terminal window opened with tunnel script."
    print_step "The tunnel will start in the new Terminal window."
    print_step "If you see errors, check your config.env or run ./debug for help."
    
    return 0
}


# Setup wizard for first-time users
run_setup_wizard() {
    print_header
    echo -e "${BLUE}Welcome! Let's set up your Brazil SSH tunnel step by step.${NC}\n"
    
    # Check if user has Azure VM
    if ! ask_yes_no "Do you already have an Azure VM running in Brazil?"; then
        print_step "You need to create an Azure VM first."
        echo -e "${BLUE}Please follow this guide: ${PROJECT_DIR}/docs/azure_vm_setup.md${NC}"
        if ask_yes_no "Open the Azure VM setup guide now?"; then
            open "$PROJECT_DIR/docs/azure_vm_setup.md"
        fi
        return 1
    fi
    
    # Check if user has SSH keys
    if ! ask_yes_no "Do you have SSH keys set up for your Azure VM?"; then
        print_step "You need to generate SSH keys first."
        echo -e "${BLUE}Please follow this guide: ${PROJECT_DIR}/docs/ssh_key_setup.md${NC}"
        if ask_yes_no "Open the SSH key setup guide now?"; then
            open "$PROJECT_DIR/docs/ssh_key_setup.md"
        fi
        return 1
    fi
    
    # Help user configure config.env
    print_step "Let's configure your config.env file..."
    
    read -p "$(echo -e "${YELLOW}Enter your Azure VM IP address: ${NC}")" vm_ip
    read -p "$(echo -e "${YELLOW}Enter SSH username (usually 'azureuser'): ${NC}")" ssh_user
    read -p "$(echo -e "${YELLOW}Enter path to your SSH private key: ${NC}")" ssh_key
    read -p "$(echo -e "${YELLOW}Enter local port for SOCKS proxy (8080): ${NC}")" local_port
    
    # Set defaults
    ssh_user=${ssh_user:-azureuser}
    local_port=${local_port:-8080}
    
    # Create config file
    cat > "$CONFIG_FILE" << EOF
# Brazil SSH Tunnel Configuration
# 🇧🇷 Configure your Brazil VM connection details here

# Azure VM Details
VM_IP="$vm_ip"
SSH_USER="$ssh_user"
SSH_KEY="$ssh_key"

# Tunnel Configuration  
LOCAL_PORT="$local_port"
TUNNEL_NAME="Brazil SSH Tunnel"

# Connection Options
SSH_OPTIONS="-4 -C -N -o ServerAliveInterval=30 -o ServerAliveCountMax=3"

# Note: Update these values to match your own Azure VM setup
EOF
    
    print_success "Config file created!"
}

# Stop tunnel
stop_tunnel() {
    print_step "Stopping Brazil SSH tunnel..."
    
    # Check if tunnel is running first
    if ! check_tunnel_status; then
        print_warning "No tunnel is currently running."
        return 0
    fi
    
    # Kill tunnel processes
    pkill -f "ssh.*${LOCAL_PORT}.*${SSH_USER}@${VM_IP}" 2>/dev/null || true
    
    # Wait a moment for processes to die
    sleep 1
    
    # Verify tunnel stopped
    if ! check_tunnel_status; then
        print_success "SSH tunnel stopped successfully!"
    else
        print_warning "Tunnel may still be running. You can try the restart option."
    fi
}

# Show tunnel status
show_status() {
    print_header
    
    if ! check_config; then
        print_error "Configuration not found. Run ./start to set up."
        return 1
    fi
    
    source "$CONFIG_FILE"
    
    if check_tunnel_status; then
        print_success "SSH tunnel is running!"
        echo -e "${BLUE}Connection: ${SSH_USER}@${VM_IP}:${LOCAL_PORT}${NC}"
        echo -e "${BLUE}SOCKS proxy: localhost:${LOCAL_PORT}${NC}"
        
        # Test the proxy
        print_step "Testing proxy connection..."
        if curl --socks5 127.0.0.1:${LOCAL_PORT} -4 --connect-timeout 3 --max-time 5 -s ifconfig.me >/dev/null 2>&1; then
            print_success "Proxy is working!"
        else
            print_warning "Proxy connection failed."
        fi
    else
        print_warning "SSH tunnel is not running."
        echo -e "${BLUE}To start: ./start${NC}"
    fi
}

# Restart tunnel
restart_tunnel() {
    print_step "Restarting Brazil SSH tunnel..."
    
    # Stop tunnel first
    pkill -f "ssh.*${LOCAL_PORT}.*${SSH_USER}@${VM_IP}" 2>/dev/null || true
    sleep 2
    
    # Start tunnel
    start_tunnel
}

# Handle command line arguments
handle_commands() {
    case "${1:-}" in
        "stop")
            if ! check_config; then
                print_error "Configuration not found."
                exit 1
            fi
            source "$CONFIG_FILE"
            stop_tunnel
            exit 0
            ;;
        "status")
            show_status
            exit 0
            ;;
        "restart")
            if ! check_config; then
                print_error "Configuration not found."
                exit 1
            fi
            source "$CONFIG_FILE"
            restart_tunnel
            exit 0
            ;;
        "menu"|"interactive"|"")
            # Default behavior - show interactive menu
            return 0
            ;;
        "help"|"-h"|"--help")
            print_header
            echo -e "${BLUE}Usage:${NC}"
            echo -e "  ./start              - Interactive menu (default)"
            echo -e "  ./start menu         - Interactive menu"
            echo -e "  ./start stop         - Stop running tunnel"
            echo -e "  ./start status       - Check tunnel status"
            echo -e "  ./start restart      - Restart tunnel"
            echo -e "  ./start help         - Show this help"
            echo -e "\n${BLUE}Interactive menu provides:${NC}"
            echo -e "  • Start/stop/restart tunnel"
            echo -e "  • Test connections"
            echo -e "  • Open setup guides"
            echo -e "  • Debug issues"
            echo -e "  • Edit configuration"
            exit 0
            ;;
        *)
            print_error "Unknown command: $1"
            echo -e "Run './start help' for usage information."
            exit 1
            ;;
    esac
}

# First-time setup workflow
run_first_time_setup() {
    # Check if this is first run
    if ! check_config; then
        run_setup_wizard
        if ! check_config; then
            print_error "Setup incomplete. Please run again after following the guides."
            exit 1
        fi
    fi
    
    # Load config
    source "$CONFIG_FILE"
    
    print_header
    print_step "Checking your Brazil tunnel setup..."
    
    # Check SSH key
    if ! check_ssh_key; then
        print_error "SSH key issues detected."
        if ask_yes_no "Open SSH key setup guide?"; then
            open "$PROJECT_DIR/docs/ssh_key_setup.md"
        fi
        return 1
    fi
    
    # Test connection
    if ! test_ssh_connection; then
        print_error "Cannot connect to your Azure VM."
        echo -e "${BLUE}Possible issues:${NC}"
        echo -e "  • VM is not running"
        echo -e "  • SSH key not added to VM"
        echo -e "  • Network security group blocking SSH"
        echo -e "  • Wrong IP address in config"
        
        if ask_yes_no "Open troubleshooting guide?"; then
            open "$PROJECT_DIR/docs/azure_vm_setup.md"
        fi
        return 1
    fi
    
    print_success "Setup verification complete!"
    return 0
}

# Main logic
main() {
    # Handle command line arguments first
    handle_commands "$@"
    
    # If we get here, we're in interactive mode
    
    # Run first-time setup if needed
    if ! run_first_time_setup; then
        exit 1
    fi
    
    # Load config (in case it was just created)
    source "$CONFIG_FILE"
    
    # Show welcome message for first time
    print_header
    print_success "Welcome to Brazil SSH Tunnel Control Panel!"
    echo -e "${BLUE}This interactive menu lets you manage your tunnel easily.${NC}"
    
    # Start interactive menu loop
    interactive_menu
}

# Run main function
main "$@"